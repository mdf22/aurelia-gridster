import { EventAggregator } from 'aurelia-event-aggregator';
import { AuGridsterItem } from "./au-gridster-item";
import { AuGridConfig, AuGridItemPosition, AuGridItemSize } from "./au-gridster-interfaces.d";
import { AureliaGridsterConfig } from "./aurelia-gridster";
export declare class AuGridster {
    protected element: HTMLDivElement;
    protected ea: EventAggregator;
    protected CONST_CONFIG: AureliaGridsterConfig;
    gridOpts: any;
    colWidth: number;
    rowHeight: number;
    minCols: number;
    minRows: number;
    marginTop: number;
    marginRight: number;
    marginBottom: number;
    marginLeft: number;
    screenMargin: number;
    isDragging: boolean;
    isResizing: boolean;
    autoStyle: boolean;
    resizeEnable: boolean;
    dragEnable: boolean;
    cascade: string;
    minWidth: number;
    minHeight: number;
    private _items;
    private _draggingItem;
    private _resizingItem;
    private _resizeDirection;
    private _itemGrid;
    private _containerWidth;
    private _containerHeight;
    private _maxCols;
    private _maxRows;
    private _visibleCols;
    private _visibleRows;
    private _setWidth;
    private _setHeight;
    private _posOffset;
    private _adding;
    private _placeholderRef;
    private _fixToGrid;
    private _autoResize;
    private _destroyed;
    private _maintainRatio;
    private _aspectRatio;
    private _preferNew;
    private _zoomOnDrag;
    private _limitToScreen;
    private _centerToScreen;
    private _curMaxRow;
    private _curMaxCol;
    private _dragReady;
    private _resizeReady;
    private _elementBasedDynamicRowHeight;
    private static CONST_DEFAULT_CONFIG;
    private _config;
    constructor(element: any, config: any, eventAggregator: any);
    bind(bindingContext: Object, overrideContext: Object): void;
    attached(): void;
    detached(): void;
    /** handle gridster resize  */
    onResizeHandler: (rect: ClientRect) => void;
    setConfig(config: AuGridConfig): void;
    getItemPosition(index: number): AuGridItemPosition;
    getItemSize(index: number): AuGridItemSize;
    setMargins(margins: Array<string>): void;
    enableDrag(): void;
    disableDrag(): void;
    enableResize(): void;
    disableResize(): void;
    addItem(auItem: AuGridsterItem): void;
    removeItem(auItem: AuGridsterItem): void;
    updateItem(auItem: AuGridsterItem): void;
    triggerCascade(): void;
    triggerResize(): void;
    resizeEventHandler(e: any): void;
    mouseDownEventHandler: (e: MouseEvent) => void;
    mouseUpEventHandler: (e: any) => void;
    mouseMoveEventHandler: (e: any) => void;
    private updatePositionsAfterMaxChange();
    private _calculateColWidth();
    private _calculateRowHeight();
    private _updateRatio();
    private _applyChanges(changes);
    private _resizeStart(e);
    private _dragStart(e);
    private _zoomOut();
    private _resetZoom();
    private _drag(e);
    private _resize(e);
    private _dragStop(e);
    private _resizeStop(e);
    private _maxGridSize(w, h);
    private _calculateGridSize(width, height);
    private _calculateGridPosition(left, top);
    private _hasGridCollision(pos, dims);
    private _getCollisions(pos, dims);
    private _fixGridCollisions(pos, dims);
    private _cascadeGrid(pos?, dims?);
    private _fixGridPosition(pos, dims);
    private _isWithinBoundsX(pos, dims, allowExcessiveItems?);
    private _fixPosToBoundsX(pos, dims);
    private _fixSizeToBoundsX(pos, dims);
    private _isWithinBoundsY(pos, dims, allowExcessiveItems?);
    private _fixPosToBoundsY(pos, dims);
    private _fixSizeToBoundsY(pos, dims);
    private _isWithinBounds(pos, dims, allowExcessiveItems?);
    private _fixPosToBounds(pos, dims);
    private _fixSizeToBounds(pos, dims);
    private _addToGrid(item);
    private _removeFromGrid(item);
    private _filterGrid();
    private _updateSize();
    private _getMaxRow();
    private _getMaxCol();
    private _getMousePosition(e);
    private _getAbsoluteMousePosition(e);
    private _getContainerColumns();
    private _getScreenMargin();
    private _getContainerRows();
    private _getItemFromPosition(position);
    private _createPlaceholder(item);
    private _emitOnItemChange();
}
